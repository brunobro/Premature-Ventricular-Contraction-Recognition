#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Compara as a performance geral das máquinas utilizando o AHP
"""
import numpy as np
import AHP
import config

'''
Resultados do Exeprimento I DS1: treinamento

m_clf0 = [0.98 , 0.8821 , 0.9891 , 0.9214 , 0.9852 , 0.846 , 0.993]
m_clf1 = [0.9777 , 0.8708 , 0.9878 , 0.9248 , 0.9824 , 0.8228 , 0.9933]
m_suave = [0.9797 , 0.8808 , 0.9573 , 0.9239 , 0.9846 , 0.8415 , 0.9932]
m_rigida_n = [0.9874 , 0.9214 , 0.947 , 0.9062 , 0.9946 , 0.937 , 0.9917]
m_rigida_p = [0.9703 , 0.8371 , 0.9665 , 0.94 , 0.973 , 0.7544 , 0.9946]
m_ahp_03 = [0.9706,0.8383, 0.9664,0.9397,0.9733,0.7566,0.9946]
m_ahp_04 = [0.9753,0.8594, 0.9603,0.9292,0.9794,0.7993,0.9936]
m_ahp_05 = [0.9796 , 0.8799 , 0.9559 , 0.9214 , 0.9847 , 0.8419 , 0.993]
m_ahp_06 = [0.9841,0.9036,0.9526,0.9158,0.9902,0.8917,0.9925]
m_ahp_07 = [0.9875,0.9217,0.9472,0.9065,0.9946,0.9374,0.9918]
'''

'''
Resultados do Exeprimento I DS2: treinamento

m_clf0 = [ 0.8551 , 0.4471 , 0.9196 , 0.6644 , 0.8736 , 0.3369 , 0.9642]
m_clf1 = [0.8769 , 0.5533 , 0.9286 , 0.8648 , 0.8781 , 0.4068 , 0.9853]
m_suave = [0.9067 , 0.5769 , 0.8282 , 0.7217 , 0.9246 , 0.4806 , 0.9717]
m_rigida_n = [0.9307 , 0.6085 , 0.7470 , 0.6104 , 0.9617 , 0.6066 , 0.9623]
m_rigida_p = [0.8013 , 0.4491 , 0.9532 , 0.9188 , 0.7899 , 0.2972 , 0.9902]
m_ahp_03 = [0.8018 , 0.4499 ,  0.9533 , 0.9191 , 0.7905 , 0.2978 , 0.9902]
m_ahp_04 = [0.8757 , 0.5532 ,  0.9258 , 0.8724 , 0.8760 , 0.4050 , 0.9861]
m_ahp_05 = [0.8784 , 0.5561 , 0.9206 , 0.8640 , 0.8797 , 0.4099 , 0.9853]
m_ahp_06 = [0.8835 , 0.5650 , 0.9172 , 0.8583 , 0.8859 , 0.4211 , 0.9848]
m_ahp_07 = [0.9306 , 0.6081 , 0.7474 , 0.6109 , 0.9615 , 0.6053 , 0.9623]
'''

'''
Resultados do Exeprimento I com dados balanceados

m_clf0 = [0.9789,0.9787,0.9791,0.9689,0.9889,0.9886,0.9695]
m_clf1 = [0.9784,0.9781,0.9787,0.9659,0.9909,0.9907,0.9667]
m_suave = [0.9792,0.9790,0.9683,0.9679,0.9905,0.9903,0.9686]
m_rigida_n = [0.9775,0.9771,0.9592,0.9585,0.9966,0.9965,0.9600]
m_rigida_p = [0.9797,0.9797,0.9764,0.9764,0.9831,0.9830,0.9765]
m_ahp_03 = [0.9802,0.9802, 0.9788,0.9787,0.9818,0.9817,0.9788]
m_ahp_04 = [0.9808,0.9806, 0.9748,0.9747,0.9868,0.9867,0.9750]
m_ahp_05 = [0.9792,0.9790,0.9683,0.9679,0.9905,0.9903,0.9686]
m_ahp_06 = [0.9787,0.9784,0.9631,0.9625,0.9949,0.9948,0.9637]
m_ahp_07 = [0.9760,0.9755,0.9563,0.9554,0.9966,0.9965,0.9572]
'''

'''
Resultados do Exeprimento I com dados balanceados artificialmente

m_clf0 = [0.8409 , 0.8525 , 0.8273 , 0.9197 , 0.7621 , 0.7945 , 0.9047]
m_clf1 = [0.9744 , 0.9741 , 0.9747 , 0.9621 , 0.9867 , 0.9864 , 0.9630]
m_suave = [0.9704 , 0.9701 , 0.9596 , 0.9591 , 0.9817 , 0.9812 , 0.9600]
m_rigida_n = [0.9429 , 0.9396 , 0.8934 , 0.8879 , 0.9979 , 0.9977 , 0.8990]
m_rigida_p = [0.8779 , 0.8862 , 0.9930 , 0.9940 , 0.7508 , 0.7996 , 0.9921]
m_ahp_03 = [0.9778 , 0.9776 ,  0.9695 , 0.9692 , 0.9863 , 0.9860 , 0.9697]
m_ahp_04 = [0.9761 , 0.9759 ,  0.9659 , 0.9655 , 0.9867 , 0.9864 , 0.9662]
m_ahp_05 = [0.9756 , 0.9753 , 0.9644 , 0.9640 , 0.9872 , 0.9868 , 0.9648]
m_ahp_06 = [0.9749 , 0.9746 , 0.9627 , 0.9622 , 0.9876 , 0.9872 , 0.9631]
m_ahp_07 = [0.9746 , 0.9742 , 0.9611 , 0.9606 , 0.9886 , 0.9883 , 0.9617]
'''


'''
Resultados do Exeprimento VI com dados balanceados artificialmente

m_clf0 = [0.8266 , 0.8354 , 0.8168 , 0.8803 , 0.7729 , 0.7949 , 0.8659]
m_clf1 = [0.8681 , 0.8490 , 0.8829 , 0.7416 , 0.9946 , 0.9928 , 0.7938]
m_suave = [0.9209 , 0.9170 , 0.8796 , 0.8743 , 0.9674 , 0.9641 , 0.8850]
m_rigida_n = [0.8265 , 0.7906 , 0.6964 , 0.6551 , 0.9979 , 0.9967 , 0.7432]
m_rigida_p = [0.8682 , 0.8800 , 0.9626 , 0.9667 , 0.7696 , 0.8076 , 0.9586 ]
m_ahp_03 = [0.8685 , 0.8802 , 0.9617 , 0.9659 , 0.7712 , 0.8085 , 0.9576 ]
m_ahp_04 = [0.8688 , 0.8801 , 0.9589 , 0.9632 , 0.7745 , 0.8103 , 0.9546]
m_ahp_05 = [0.8775 , 0.8612 , 0.7824 , 0.7603 , 0.9948 , 0.9932 , 0.8058]
m_ahp_06 = [0.8327 , 0.7995 , 0.7064 , 0.6675 , 0.9978 , 0.9967 , 0.7501]
m_ahp_07 = [0.8278 , 0.7926 , 0.6985 , 0.6578 , 0.9979 , 0.9968 , 0.7446 ]
'''

'''
Resultados do Exeprimento VIII com dados balanceados artificialmente

m_clf0 = [0.8192 , 0.8294 , 0.8078 , 0.8787 , 0.7597 , 0.7853 , 0.8624 ]
m_clf1 = [0.9297 , 0.9251 , 0.9338 , 0.8680 , 0.9915 , 0.9903 , 0.8825 ]
m_suave = [0.9342 , 0.9333 , 0.9210 , 0.9198 , 0.9487 , 0.9471 , 0.9221 ]
m_rigida_n = [0.8792 , 0.8638 , 0.7870 , 0.7660 , 0.9924 , 0.9902 , 0.8092 ]
m_rigida_p = [0.8697 , 0.8827 , 0.9779 , 0.9807 , 0.7588 , 0.8026 , 0.9852  ]
m_ahp_03 = [0.8737 , 0.8858 , 0.9774 , 0.9801 , 0.7672 , 0.8081 , 0.9747  ]
m_ahp_04 = [0.89357 , 0.9321 , 0.8875 , 0.8818 , 0.9897 , 0.9885 , 0.8933 ]
m_ahp_05 = [0.9325 , 0.9283 , 0.8809 , 0.8744 , 0.9905 , 0.9893 , 0.8875 ]
m_ahp_06 = [0.9299 , 0.9253 , 0.8756 , 0.8684 , 0.9913 , 0.9901 , 0.8828]
m_ahp_07 = [0.8831 , 0.8687 , 0.7933 , 0.7734 , 0.9927 , 0.9907 , 0.8142  ]
'''

'''
Resultados do Exeprimento IV, com desvios na onda R

m_clf0 = [0.9710, 0.8209, 0.9842, 0.8186, 0.9845, 0.8232, 0.9840 ]
m_clf1 = [0.9731, 0.8379, 0.9853, 0.8577, 0.9833, 0.8190, 0.9874 ]
m_suave = [0.9751, 0.8473, 0.9146, 0.8521, 0.9859, 0.8424, 0.9869 ]
m_rigida_n = [0.9789, 0.8603, 0.8817, 0.7996, 0.9948, 0.9309, 0.9825 ]
m_rigida_p = [0.9651, 0.8033, 0.9294, 0.9294, 0.8767, 0.9730, 0.9889  ]
m_ahp_03 = [0.9676, 0.8150, 0.9313, 0.8798, 0.9753, 0.7590, 0.9892  ]
m_ahp_04 = [0.9747, 0.9130, 0.9589, 0.9311, 0.9820, 0.8956, 0.9885 ]
m_ahp_05 = [0.9747, 0.8456, 0.9161, 0.8546, 0.9853, 0.8367, 0.9871 ]
m_ahp_06 = [0.9763, 0.8520, 0.9081, 0.8416, 0.9882, 0.8627, 0.9860]
m_ahp_07 = [0.9775, 0.8545, 0.8914, 0.8148, 0.9918, 0.8983, 0.9838  ]
'''

'''
Resultados do Exeprimento VI, com desvios na onda R
'''
m_clf0 = [0.9702, 0.7753, 0.9840, 0.8180, 0.9804, 0.7369, 0.9877]
m_clf1 = [0.9698, 0.7816, 0.9838, 0.8596, 0.9772, 0.7167, 0.9904 ]
m_suave = [0.9710, 0.7879, 0.9187, 0.8568, 0.9786, 0.7292, 0.9903 ]
m_rigida_n = [0.9808, 0.8402, 0.8843, 0.8012, 0.9929, 0.8832, 0.9867 ]
m_rigida_p = [0.9591, 0.7296, 0.9304, 0.8764, 0.9647, 0.6249, 0.9915  ]
m_ahp_03 = [0.9596, 0.7334, 0.9340, 0.8826, 0.9648, 0.6273, 0.9919  ]
m_ahp_04 = [0.9654, 0.7599, 0.9269, 0.8705, 0.9718, 0.6742, 0.9911 ]
m_ahp_05 = [0.9714, 0.7903, 0.9189, 0.8571, 0.9791, 0.7332, 0.9903 ]
m_ahp_06 = [0.9766, 0.8192, 0.9108, 0.8437, 0.9855, 0.7960, 0.9895]
m_ahp_07 = [0.9814, 0.8468, 0.8949, 0.8180, 0.9923, 0.8777, 0.9878  ]

w  = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
w  = w / np.linalg.norm(w, 1)

#Matrizes de comparações paritárias
m_Acc, m_F1_P, m_F1_N, m_Se, m_Sp, m_Pr_P, m_Pr_N = AHP.pairwiseMatrix(np.array([m_clf0, m_clf1, m_suave, m_rigida_n, m_rigida_p, m_ahp_03, m_ahp_04, m_ahp_05, m_ahp_06, m_ahp_07]), kappa=config.KAPPA_AHP)

#Obtém os vetores de prioridades locais
w1, cr = AHP.localVector(m_Acc)
w2, cr = AHP.localVector(m_F1_P)
w3, cr = AHP.localVector(m_F1_N)
w4, cr = AHP.localVector(m_Se)
w5, cr = AHP.localVector(m_Sp)
w6, cr = AHP.localVector(m_Pr_P)
w7, cr = AHP.localVector(m_Pr_N)

#obtém o vetor de prioridade global
ws = np.array([w1, w2, w3, w4, w5, w6, w7])
v  = AHP.globalVector(w, ws)

names = ['Clf0    ', 'Clf1    ', 'Suave  ', 'Rígido N', 'Rígido P', 'AHP 0,3', 'AHP 0,4', 'AHP 0,5', 'AHP 0,6', 'AHP 0,7']
items = np.flip(np.argsort(v))
o = 1
for i in items:
    print(o, ' - ', names[i], '\t', np.round(v[i]* 100, 2), '%')
    o += 1